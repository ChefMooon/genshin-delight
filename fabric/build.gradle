plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
//    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    Project common = project(":common")
    accessWidenerPath = common.loom.accessWidenerPath

    runs {
        datagen {
            client()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"
            programArgs "--existing", file("src/main/resources").absolutePath

            environmentVariable("DATAGEN", "TRUE")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // FD Refabricated
    modImplementation ("vectorwing:FarmersDelight:${minecraft_version}-${fdrf_version}") {
        exclude(group: "net.fabricmc")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

var env = System.getenv()
var changelogFile = rootProject.file("changelog.md")
var changelogText = changelogFile.exists() ? changelogFile.text : ""
var vName = mod_name + " " + project.version

//unifiedPublishing {
//    project {
//        displayName = vName
//        version = project.version
//        changelog = changelogText
//        releaseType = mod_version_type
//        gameVersions = minecraft_supported_versions.split(",").toList()
//        gameLoaders = ["fabric","quilt"]
//
//        mainPublication tasks.remapJar
//
//        relations {
//            depends {
//                curseforge = "fabric-api"
//                modrinth = "fabric-api"
//            }
//            includes {} // Mark as an included dependency
//        }
//
//        var cfToken = System.getenv("CURSEFORGE_TOKEN")
//        if (cfToken != null) {
//            curseforge {
//                token = cfToken
//                id = curseforge_project_id
//            }
//        }
//
//        var mrToken  = System.getenv("MODRINTH_TOKEN")
//        if (mrToken != null) {
//            modrinth {
//                token = mrToken
//                id = modrinth_project_id
//            }
//        }
//    }
//}
